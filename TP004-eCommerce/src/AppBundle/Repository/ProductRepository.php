<?php

namespace AppBundle\Repository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{

    public function getProductsBySubCategory($locale, $slug) {

        $results = $this
            ->createQueryBuilder('product')
            ->join('product.translations','translations')
            ->join('product.subcategories', 'subcategories')
            ->join('subcategories.translations', 'subcategoriestranslation')

            ->where('translations.locale = :locale')

            ->andWhere('subcategoriestranslation.slug = :slug')

            ->setParameters([
                'locale' => $locale,
                'slug' => $slug
            ])

            ->setMaxResults(10)
            ->getQuery()
            ->getResult()
        ;

        return $results;
    }

    public function getRandomProducts($locale, $max, $category = null, $subcategory = null) {

        $results = $this
            ->createQueryBuilder('product')
            ->select('product.price, product.id, product.image, trans.name, trans.description, trans.slug, transSubcat.slug As subCatSlug, transCat.slug AS catSlug')
            ->join('product.translations','trans')
            ->join('product.subcategories', 'subcat')
            ->join('subcat.translations','transSubcat')
            ->join('subcat.category', 'cat')
            ->join('cat.translations', 'transCat')
            ->where('trans.locale = :locale')
            ->setParameters([
                'locale' => $locale
            ])
            ->orderBy('RAND()')
            ->setMaxResults($max)
            ->getQuery()
            ->getResult()
        ;

        return $results;
    }

    public function getOneProduct($locale, $slug) {

        $results = $this
            ->createQueryBuilder('product')
            ->join('product.translations','translations')
            ->where('translations.slug = :slug')
            ->andWhere('translations.locale = :locale')
            ->setParameters([
                'slug' => $slug,
                'locale' => $locale
            ])
            ->getQuery()
            ->getOneOrNullResult()
        ;

        return $results;
    }

    public function searchProductBy($locale, $search) {

        $results = $this
            ->createQueryBuilder('product')
            ->join('product.translations','translations')
            ->where('translations.name LIKE :search')
            ->orWhere('translations.description LIKE :search')
            ->andWhere('translations.locale = :locale')
            ->setParameters([
                'search' => '%'.$search.'%',
                'locale' => $locale
            ])
            ->getQuery()
            ->getResult()
        ;

        return $results;
    }
}
